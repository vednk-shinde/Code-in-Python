class Solution:
    def maximumSum(self, grid):
        n, m = len(grid), len(grid[0])
        ones = [(i, j) for i in range(n) for j in range(m) if grid[i][j] == 1]

        def area(cells):
            if not cells:
                return float('-inf')  # invalid rectangle
            rmin = min(i for i, j in cells)
            rmax = max(i for i, j in cells)
            cmin = min(j for i, j in cells)
            cmax = max(j for i, j in cells)
            return (rmax - rmin + 1) * (cmax - cmin + 1)

        ans = float('-inf')

        # Horizontal splits
        for r1 in range(n - 2):
            for r2 in range(r1 + 1, n - 1):
                part1 = [(i, j) for i, j in ones if i <= r1]
                part2 = [(i, j) for i, j in ones if r1 < i <= r2]
                part3 = [(i, j) for i, j in ones if i > r2]
                ans = max(ans, area(part1) + area(part2) + area(part3))

        # Vertical splits
        for c1 in range(m - 2):
            for c2 in range(c1 + 1, m - 1):
                part1 = [(i, j) for i, j in ones if j <= c1]
                part2 = [(i, j) for i, j in ones if c1 < j <= c2]
                part3 = [(i, j) for i, j in ones if j > c2]
                ans = max(ans, area(part1) + area(part2) + area(part3))

        # Mixed T / L splits
        for r in range(n - 1):
            for c in range(m - 1):
                # Top vs bottom-left & bottom-right
                top = [(i, j) for i, j in ones if i <= r]
                left = [(i, j) for i, j in ones if i > r and j <= c]
                right = [(i, j) for i, j in ones if i > r and j > c]
                ans = max(ans, area(top) + area(left) + area(right))

                # Left vs top-right & bottom-right
                left = [(i, j) for i, j in ones if j <= c]
                top = [(i, j) for i, j in ones if j > c and i <= r]
                bottom = [(i, j) for i, j in ones if j > c and i > r]
                ans = max(ans, area(left) + area(top) + area(bottom))

        return ans
