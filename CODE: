
import numpy as np 
# Create two 3x3 random matrices with values 
between 1 and 9 
matrix1 = np.random.randint(1, 10, (3, 3))  # 
Example: [[3, 5, 7], [2, 6, 4], [9, 1, 8]] 
matrix2 = np.random.randint(1, 10, (3, 3))  # 
Example: [[4, 2, 6], [8, 3, 7], [5, 9, 1]] 
# Perform matrix operations 
addition_result = matrix1 + matrix2  # Element
wise addition 
# Example Output: [[7, 7, 13], [10, 9, 11], [14, 10, 
9]] 
subtraction_result = matrix1 - matrix2  # 
Element-wise subtraction 
# Example Output: [[-1, 3, 1], [-6, 3, -3], [4, -8, 7]] 
multiplication_result = matrix1.dot(matrix2)  # 
Matrix multiplication 
# Example Output: [[ 91, 94, 76], [ 74, 58, 67], 
[109, 66, 95]] 
# Function to display matrix details 
def display_matrix_details(matrix, operation): 
print(f"\n{operation} Result:") 
print(matrix)  # Display matrix 
print(f"Shape: {matrix.shape}")  # Show shape 
(should be (3,3)) 
print(f"Dimensions: {matrix.ndim}")  # Show 
number of dimensions (should be 2) 
print(f"Dtype: {matrix.dtype}")  # Show data 
type of elements 
print(f"Rank: {np.linalg.matrix_rank(matrix)}")  
# Compute matrix rank 
print(f"Flattened Output: {matrix.flatten()}")  # 
Flatten and display the matrix 
# Display details for each operation 
display_matrix_details(addition_result, 
"Addition") 
display_matrix_details(subtraction_result, 
"Subtraction") 
display_matrix_details(multiplication_result, 
"Multiplication") 
OUTPUT: 
Addition Result: 
[[ 7  7 13] 
[10  9 11] 
[14 10  9]] 
Shape: (3, 3) 
Dimensions: 2 
Dtype: int64 
Rank: 3 
Flattened Output: [ 7  7 13 10  9 11 14 10  9] 
Subtraction Result: 
[[-1  3  1] 
[-6  3 -3] 
[ 4 -8  7]] 
Shape: (3, 3) 
Dimensions: 2 
Dtype: int64 
Rank: 3 
Flattened Output: [-1  3  1 -6  3 -3  4 -8  7] 
Multiplication Result: 
[[ 91  94  76] 
[ 74  58  67] 
[109  66  95]] 
Shape: (3, 3) 
Dimensions: 2 
Dtype: int64 
Rank: 3 
Flattened Output: [ 91  94  76  74  58  67 109  66  
95]
