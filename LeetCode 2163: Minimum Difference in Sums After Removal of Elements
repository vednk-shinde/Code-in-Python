import heapq

class Solution:
    def minimumDifference(self, nums):
        n = len(nums) // 3
        left_heap = []  # max heap (negative values)
        left_sum = 0
        left_sums = [0] * (2 * n + 1)

        # Prefix: track n largest elements from left (i.e. min sum of those)
        for i in range(2 * n):
            heapq.heappush(left_heap, -nums[i])
            left_sum += nums[i]
            if len(left_heap) > n:
                left_sum += heapq.heappop(left_heap)  # remove largest
            if len(left_heap) == n:
                left_sums[i] = left_sum

        right_heap = []
        right_sum = 0
        right_sums = [0] * (2 * n + 1)

        # Suffix: track n smallest elements from right (i.e. max sum of those)
        for i in range(3 * n - 1, n - 1, -1):
            heapq.heappush(right_heap, nums[i])
            right_sum += nums[i]
            if len(right_heap) > n:
                right_sum -= heapq.heappop(right_heap)
            if len(right_heap) == n:
                right_sums[i] = right_sum

        # Compute minimum difference
        result = float('inf')
        for i in range(n - 1, 2 * n):
            if right_sums[i + 1]:
                diff = left_sums[i] - right_sums[i + 1]
                result = min(result, diff)

        return result
